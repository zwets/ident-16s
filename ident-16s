#!/bin/sh
#
#  ident-16s - rapid identification of bacterial species from FASTA
#  (c) 2017 Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Home: https://github.io/zwets/ident-16s

# Default parameters
MIN_COVERAGE=60
MIN_IDENTITY=98.0
MAX_MATCHES=1

# Constants
PROG_DIR="$(realpath "$(dirname "$0")")"
WORK_DIR="/tmp/$(basename "$0").$$"
INPUT_FNA="$WORK_DIR/input.fna"
DB_NAME="16S_ribosomal_RNA"
DB_FILE="${DB_NAME}.nhr"
TAB="$(printf '\t')"

# Fail fast and trap exit for WORK_DIR cleanup
set -e
trap cleanup EXIT
EXIT_STATUS=0

# Function to exit this script with message $* on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit
}

# Function to emit $* to standard error if VERBOSE is set
emit() {
    [ ! $VERBOSE ] || echo "$(basename "$0"): $*" >&2 || true
}

# Cleanup on exit
cleanup() {
    emit "clean up $WORK_DIR"
    [ ! -d "$WORK_DIR" ] || rm -rf "$WORK_DIR" ] || true
    exit $EXIT_STATUS
}

# Function checks if $1 is on the path or error exits
check_dep() {
    emit "checking dependency: $1"
    command -v "$1" >/dev/null ||
        err_exit "missing command (please refer to the README): $1"
}

# Function either unzips file $1 to $2 or links to original
unzip_or_link() {
    [ -f "$1" ] && [ -r "$1" ] || err_exit "no such file: $1"
    case "$(file -L --mime-type --brief "$1")" in
    "application/x-xz")
        emit "unxzipping $1 to $2"
        xz -dc "$1" >"$2"
        ;;
    "application/gzip")
        emit "ungzipping $1 to $2"
        gzip -dc "$1" >"$2"
        ;;
    *)  emit "linking $1 to $2"
        ln -sf "$(realpath "$1")" "$2"
        ;;
    esac
}

# Function to show usage information and exit with code $1 (default 1)
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] [FILE]

  Identify the bacterial species in FASTA format FILE by 16S rRNA identity.
  If no FILE is given or FILE is '-', read from standard input.  FILE may
  be xz or gzip compressed.

  OPTIONS
   -c, --coverage COV  reference coverage threshold (default $MIN_COVERAGE)
   -i, --identity PCT  identity percentage threshold (default $MIN_IDENTITY)
   -m, --matches N     maximum number of matches per gene found (default $MAX_MATCHES)
   -d, --deduplicate   filter duplicate matches from output, keeping best
   -l, --long-output   output extended match information (see below)
   -n, --no-headers    suppress column headers and sequence titles in output
   -g, --genes-only    just output the 16S genes found in FILE, no matching
   -v, --verbose       show progress information on standard error
   -h, --help          this information

  The script operates by first extracting predicted 16S rRNA genes from FILE,
  then finding for each predicted gene the N (default $MAX_MATCHES) best matches in the
  $DB_NAME database that meet the coverage (default $MIN_COVERAGE) and identity
  (default $MIN_IDENTITY) threshold percentages.

  The script outputs the scientific name of each match, one per line.  With
  option -l additional information pertaining to each match is output in tab
  separated columns: species, taxid, accession, gene/reference length,
  alignment length, # identical bases, % coverage, % identity.

  Option -d filters duplicates that may occur when there are multiple gene
  copies, or when -m is set to a value greater than 1.  With option -g, no
  matching is performed; the script only outputs the 16S rRNA genes found.

  NOTES
  1/ Matches are ordered by decreasing number of identical bases in the
     alignment.  This factors in both coverage and identity, which are
     insufficient measures by themselves.
  2/ Percentage identity pertains to the section of the reference that was
     covered by the predicted gene, hence 98% identity does not strictly
     prove species identity unless coverage is close to 100%.
" >&2
    EXIT_STATUS=${1:-1}
    exit
}

# Parse options

unset VERBOSE DEDUPLICATE LONG_OUTPUT GENES_ONLY
while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    --coverage=*)   MIN_COVERAGE="${1#--*=}" ;;
    -c|--coverage)  shift; MIN_COVERAGE="$1" ;;
    --identity=*)   MIN_IDENTITY="${1#--*=}" ;;
    -i|--identity)  shift; MIN_IDENTITY="$1" ;;
    --matches=*)    MAX_MATCHES="${1#--*=}"  ;;
    -m|--matches)   shift; MAX_MATCHES="$1"  ;;
    -d|--dedup*)    DEDUPLICATE=1 ;;
    -l|--long*)     LONG_OUTPUT=1 ;;
    -n|--no-head*)  NO_HEADERS=1  ;;
    -g|--genes*)    GENES_ONLY=1  ;;
    -v|--verbose)   VERBOSE=1     ;;
    -h|--help)      usage_exit 0  ;;
    *)              usage_exit    ;;
    esac
    shift
done

# Check options

[ "$(expr "$MIN_COVERAGE" : '\([0-9]\+$\)')" -eq "$MIN_COVERAGE" ] ||
    err_exit "minimum coverage must be an integral number"

# Set paths to dependencies if locally installed (see the README.md)

[ ! -d "$PROG_DIR/barrnap" ] || PATH="$PATH:$PROG_DIR/barrnap/bin"
[ ! -d "$PROG_DIR/unfasta" ] || PATH="$PATH:$PROG_DIR/unfasta"
[ ! -f "$PROG_DIR/$DB_FILE" ] || BLASTDB="$PROG_DIR"

# Check presence of dependencies

for P in barrnap uf uf-select uf-cut uf-map grep awk; do check_dep "$P"; done

[ $GENES_ONLY ] || {
    # Unless we are invoked to only extract 16S, we additionally need blastn and the database
    check_dep blastn
    # This does not guarantee it's there but covers all standard setups
    [ -n "$BLASTDB" ] && [ -f "$BLASTDB/$DB_FILE" ] || [ -n "$NCBI" ] || [ -f "$DB_FILE" ] ||
        err_exit "NCBI nor BLASTDB are set, and $DB_NAME not found in PWD or $PROG_DIR"
}

# Create working directory

emit "creating work directory: $WORK_DIR"
mkdir -p "$WORK_DIR"

# Handle arguments

if [ $# -eq 0 ]; then
    emit "copying stdin to $INPUT_FNA"
    cat > "$INPUT_FNA"  # Need to store the input for barrnap
elif [ $# -eq 1 ]; then
    unzip_or_link "$1" "$INPUT_FNA"
else
    usage_exit
fi

# MAIN
# Note: if you wonder where commands get their input from, note the pipes on preceding lines

emit "invoking barrnap to locate rRNA"

# Execute barrnap on the input fasta, grepping the 16S matches
barrnap --quiet "$INPUT_FNA" |
awk -b -O '/Name=16S_rRNA/ {print $1, $4 ":" $5}' |

# Process in turn each 16S range that barrnap predicts
while read SEQID RANGE; do
    i=$((i+1))
    emit "extracting range $i: contig $SEQID range $RANGE"

    # Cut from contig SEQID the range RANGE
    uf "$INPUT_FNA" | uf-select -i "$SEQID" | uf-cut -m "$RANGE" |
    # and adorn its sequence header to show that it is a cut
    uf-map -t "sed -re s,^>,>16S_rRNA_${i}_Origin_,"

done |

if [ $GENES_ONLY ]; then
    emit "outputting the genes"

    # When genes only, just copy the barrnap output as-is
    cat

else
    # Output long output table header unless suppressed
    [ ! $LONG_OUTPUT ] || [ $NO_HEADERS ] ||
        printf '# %s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' "Species" "Taxid" "Accession" "Gene/Ref" "Alignment" "Ident" "Coverage" "PercIdent"

    # Read each gene found by barrnap in turn
    while read FASTA_HEADER; do
        emit "blasting gene: $FASTA_HEADER"

        # Output sequence header unless suppressed or we dedupe later (add void tabs for brain dead MS Excel)
        [ $NO_HEADERS ] || [ $DEDUPLICATE ] || printf "# ${FASTA_HEADER#>}${LONG_OUTPUT:+\t\t\t\t\t\t\t}\n"

        # Read the sequence and pipe into blast
        read FASTA_SEQUENCE
        echo "$FASTA_SEQUENCE" |
        blastn -db "$DB_NAME" -perc_identity $MIN_IDENTITY -outfmt '6 sseqid saccver staxids qlen slen length nident pident sscinames' |

        # Process every match, filtering those with subject coverage below threshold
        while read SEQID ACCVER TAXIDS QLEN SLEN ALEN NIDENT PIDENT SPECIES; do
            SCOV=$((100 * ALEN / SLEN))
            [ $SCOV -lt $MIN_COVERAGE ] ||
                printf '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' "$SPECIES" "$TAXIDS" "$ACCVER" "$QLEN/$SLEN" "$ALEN" "$NIDENT" "$SCOV" "$PIDENT"
        done |

        # Sort on descending nident, keep only top MAX_MATCHES (for this gene in the input)
        sort -t "$TAB" -k 6nr -k 5nr -k 7nr |
        head -n "$MAX_MATCHES"
    done |

    # Deduped output requires sorting again, now _across_ the genes
    if [ $DEDUPLICATE ]; then
        sort -t "$TAB" -k 6nr -k 5nr -k 7nr |
        awk -b -O -F '\t' -v long="${LONG_OUTPUT:-0}" '!seen[$1] { print long ? $0 : $1; seen[$1]=1 }'
    else
        awk -b -O -F '\t' -v long="${LONG_OUTPUT:-0}" '{ print long ? $0 : $1 }'
    fi
fi

EXIT_STATUS=0

# vim: sts=4:sw=4:et:si:ai
